; docformat = 'rst'
;
; NAME:
;       TEST_H5A_V2
;
; PURPOSE:
;+
;   IDL's H5A and other HDF5 attribute-related routines take an extraordinary amount of
;   time to execute. This is an attempt to reproduce the problem I am having with my own
;   HDF5 file object.
;
;   Result:
;       Reproduces the slowness of H5A_GET_NUM_ATTRS, but not the other H5A routines.
;       
;
; :Categories:
;       Test Program
;
; :Author:
;   Matthew Argall::
;       University of New Hampshire
;       Morse Hall, Room 113
;       8 College Rd.
;       Durham, NH, 03824
;       matthew.argall@wildcats.unh.edu
;       
; :History:
;   Modification History::
;       2014/07/18  -   Written by Matthew Argall
;-
;*****************************************************************************************
;+
;   Parse a data file, closing each opened element in a timely manner.
;-
pro test_h5a_v2_parse_attrs_close, filename
    compile_opt idl2
    on_error, 2
    
    ;Open the file and the root group
    h5_id     = h5f_open(filename)
    root_id   = h5g_open(h5_id, '/')

    ;Get the datasets
    nDatasets = h5g_get_num_objs(root_id)
    datanames = strarr(nDatasets)
    dataIDs   = lonarr(nDatasets)
    for i = 0, nDatasets-1 do begin
        datanames[i] = h5g_get_obj_name_by_idx(root_id, i)
    
        ;Skip objects that are not datasets
        info = h5g_get_objinfo(root_id, datanames[i])
        if info.type ne 'DATASET' then continue
    
        ;Open the dataset
        dataIDs[i] = h5d_open(root_id, datanames[i])
    
        ;Get the attribute names
        nAttrs     = h5a_get_num_attrs(dataIDs[i])
        attr_names = strarr(nAttrs)
        attrIDs    = lonarr(nAttrs)
        
        ;Get all of the attribute names so that the user can use them instead of indices
        for j = 0, nAttrs - 1 do begin
            attrIDs[j] = h5a_open_idx(dataIDs[i], j)
            attr_names[j] = h5a_get_name(attrIDs[j])
            h5a_close, attrIDs[j]
        endfor
        
        ;Open the attributes by name
        for j = 0, nAttrs - 1 do begin
            attrIDs[j] = h5a_open_name(dataIDs[i], attr_names[j])
            h5a_close, attrIDs[j]
        endfor
        
        ;Close the dataset
        h5d_close, dataIDs[i]
    endfor

    ;Close the root group and file
    h5g_close, root_id
    h5f_close, h5_id
end


;+
;   Parse a data file, keeping all elements open.
;-
pro test_h5a_v2_parse_attrs_open, filename, file_struct
    compile_opt idl2
    on_error, 2
    
    ;Open the file and the root group
    fileID = h5f_open(filename)
    rootID = h5g_open(fileID, '/')
    
    ;Open the file and the root group
    file_struct = { name:      filename, $
                    fileID:    fileID, $
                    rootID:    rootID, $
                    nDatasets: h5g_get_num_objs(rootID) $
                  }
                  
    ;Step through each dataset
    for i = 0, file_struct.nDatasets-1 do begin
        obj_name = h5g_get_obj_name_by_idx(rootID, i)
        
        ;Skip objects that are not datasets
        info = h5g_get_objinfo(rootID, obj_name)
        if info.type ne 'DATASET' then continue
        
        ;Create a structure to store information about the dataset.
        dataID  = h5d_open(rootID, obj_name)
        nAttrs  = h5a_get_num_attrs(dataID)
        dataset = { name:      obj_name, $
                    id:        dataID, $
                    nAttrs:    nAttrs, $
                    attrNames: strarr(nAttrs), $
                    attrIDs:   lonarr(nAttrs) $
                  }

        ;Get all attribute names so that the user can open them by name instead
        ;of by index.
        for j = 0, nAttrs - 1 do begin
            dataset.attrIDs[j]   = h5a_open_idx(dataset.id, j)
            dataset.attrNames[j] = h5a_get_name((dataset.attrIDs)[j])
            h5a_close, dataset.attrIDs[j]
        endfor

        ;Open the attribute by name
        for j = 0, nAttrs - 1 do dataset.attrIDs[j] = h5a_open_name(dataset.id, dataset.attrNames[j])
        
        ;Add the dataset to the file structure
        file_struct = create_struct(file_struct, obj_name, dataset)
    endfor
end


;+
;   Cleanup a file structure generated by test_h5a_v2_parse_attrs_open
;-
pro test_h5a_v2_cleanup, file_struct
    compile_opt idl2
    on_error, 2
    
    ;Step through each dataset
    for i = 0, file_struct.nDatasets-1 do begin
        ;Datasets begin at the 5th structure key.
        index = 4+i
    
        ;Close all attributes of the dataset
        for j = 0, file_struct.(index).nAttrs - 1 do h5a_close, (file_struct.(index).attrIDs)[j]
        
        ;Close the dataset
        h5d_close, file_struct.(index).id
    endfor
    
    ;Close the root and file
    h5g_close, file_struct.rootID
    h5f_close, file_struct.fileID
end


;+
;   Compare two methods of parsing files
;       1. Parse the information and close HDF5 IDs as soon as possible.
;       2. Parse the information and leave all HDF5 IDs open
;-
pro test_h5a_v2, file, nAttempts, $
CLOSE_ALL=close_all
    compile_opt idl2
    
    catch, the_error
    if the_error ne 0 then begin
        catch, /CANCEL
        h5_close
        help, /LAST_MESSAGE
        return
    endif

    ;
    ;Parse the file
    ;

    ;Close everything as soon as possible
    if keyword_set(close_all) then begin
        for i = 0, nAttempts - 1 do test_h5a_v2_parse_attrs_close, file
        
    ;Leave all IDs open until later
    endif else begin
        ;March through each attempt
        for i = 0, nAttempts - 1 do begin
;            print, FORMAT='(%"Attempt %i of %i")', i+1, nAttempts
            
            ;Parse the file
            test_h5a_v2_parse_attrs_open, file, temp_struct
            
            ;Maintain a structure array of all parsed files
            if i eq 0 $
                then file_struct = replicate(temporary(temp_struct), nAttempts) $
                else file_struct[i] = temporary(temp_struct)
        endfor
        
        ;Close all files/groups/datasets/attributes.
        for i = 0, nAttempts - 1 do test_h5a_v2_cleanup, file_struct[i]
    endelse
end

    
;---------------------------------------------------------------------
; %Main-level program: IDL> .r test_h5a //////////////////////////////
;---------------------------------------------------------------------
;Profile the system routines (which include H5A_*, etc.)
nAttempts = 20

;Filename
dir  = '/Users/argall/Documents/Work/Data/RBSP/Ephemeris'
file = filepath('rbspa_def_MagEphem_TS04D_20120831_v1.0.0.h5', ROOT_DIR=dir)

print, '|--------------------------------|'
print, '| Close Identifiers Immediately  |'
print, '|--------------------------------|'

profiler, /SYSTEM
test_h5a_v2, file, nAttempts, /CLOSE_ALL
profiler, /REPORT
profiler, /RESET

print, '|--------------------------------|'
print, '| Close Identifiers at End       |'
print, '|--------------------------------|'

profiler, /SYSTEM
test_h5a_v2, file, nAttempts
profiler, /REPORT
profiler, /RESET
profiler, /CLEAR
end