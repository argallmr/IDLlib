; docformat = 'rst'
;
; NAME:
;       MrFileFinder__Define
;+
;   The purpose of this class is to provide a means of automatically finding contiguous
;   data file intervals. Directory and file name are searched for dates and times. With
;   the "Next_File" and "Previous_File" methods, one can effectively step from one file
;   to the next.
;
; :Author:
;   Matthew Argall::
;       University of New Hampshire
;       Morse Hall, Room 113
;       8 College Rd.
;       Durham, NH, 03824
;       matthew.argall@wildcats.unh.edu
;
; :Copyright:
;       Matthew Argall 2013
;
; :History:
;	Modification History::
;       05/31/2013  -   Written by Matthew Argall.
;-
;*****************************************************************************************
;+
;   Get class properties.
;
; :Keywords:
;       FILENAME:               in, optional, type=string
;                               The name of the file currently being used.
;       DIR_NAME:               in, optional, type=string
;                               The directory in which files are sought.
;                               
;-
pro MrFileFinder::GetProperty, $
FILENAME = filename, $
DIR_NAME = dir_name
    compile_opt idl2
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif
    
    ;Get properties of the class.
    if arg_present(filename) then filename = self.filename
    if arg_present(dir_name) then dir_name = self.dir_name
end


;+
;   Find a date embedded within a directory. Supported dates are (taking "/" to be the
;   system path separator)::
;       /YYYYMMDD/
;       /YYYY/MM/DD/
;       /YYYYDDD/
;       /YYYY/DDD/
;       /YYYYMM/
;       /YYYY/MM/
;
; :Params:
;       DIRECTORY:              in, optional, type=string
;                               The directory name in which to search for embedded dates.
;-
function MrFileFinder::findDirDate, theString
    compile_opt idl2
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return, ''
    endif
    
    ;%YYYY  -   year: 2012, 2013, etc.
    ;%MM    -   month: 01 = January, etc.
    ;%MMM   -   complete month: January, Feburary, etc.
    ;%mmm   -   abbreviated month: Jan, Feb, etc.
    ;%DD    -   day-of-month: 01-31
    ;%DDD   -   day-of-year: 000-366
    ;%dd    -   abbreviated day: Mon, Tue, etc.
    ;%ddd   -   complete day: Monday, Tuesday, etc.
    
    parts = strsplit(theString, '%', /EXTRACT)

end


;+
;   Find a date embedded within a directory. Supported dates are (taking "/" to be the
;   system path separator)::
;       /YYYYMMDD/
;       /YYYY/MM/DD/
;       /YYYYDDD/
;       /YYYY/DDD/
;       /YYYYMM/
;       /YYYY/MM/
;
; :Params:
;       DIRECTORY:              in, optional, type=string
;                               The directory name in which to search for embedded dates.
;-
function MrFileFinder::findDirDate, directory
    compile_opt idl2
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return, ''
    endif
    
    ;Get the system path separator
    sep = path_sep()
    
    ;/YYYYMMDD/ format
    pos = stregex(directory, sep + '(.+' + sep + ')' + $        ;Prefixed directory structure
                                   '([0-9]{4}' + $              ;YYYY
                                   '[^0-9^' + sep + ']?' + $    ;delimeter (not 0-9 or sep)
                                   '[0-9]{2}' + $               ;MM
                                   '[^0-9^' + sep + ']?' + $    ;delimeter (not 0-9 or sep)
                                   '[0-9]{2})' + sep + $        ;DD
                                   '(.+)', $                    ;Suffix (e.g. filename)
                                   len=len, /subexp)
                                   
    if strmid(directory, pos[0], len[0]) ne '' then begin
        dir_format = 1
        
    
    endif
stop
    ;/YYYY/MM/DD/ format
    pos = stregex(directory, sep + '(.+' + sep + ')' + $     ;Prefixed directory structure
                                   '([0-9]{4}' + sep + $    ;YYYY
                                   '[0-9]{2}' + sep + $    ;MM
                                   '[0-9]{2})' + sep, $     ;DD
                                   len=len, /subexp)

    ;/YYYYDDD/ format
    pos = stregex(directory, sep + '(.+' + sep + ')' + $     ;Prefixed directory structure
                                   '([0-9]{4})' + $          ;YYYY
                                   '[^0-9^' + sep + ']?' + $ ;delimeter (not 0-9 or sep)
                                   '([0-9]{3})' + sep, $     ;DDD
                                   len=len, /subexp)

    ;/YYYY/DDD/ format
    pos = stregex(directory, sep + '(.+' + sep + ')' + $     ;Prefixed directory structure
                                   '([0-9]{4})' + sep + $    ;YYYY
                                   '([0-9]{3})' + sep, $     ;DDD
                                   len=len, /subexp)
    
    ;/YYYYMM/ format
    pos = stregex(directory, sep + '(.+' + sep + ')' + $     ;Prefixed directory structure
                                   '([0-9]{4})' + $          ;YYYY
                                   '[^0-9^' + sep + ']?' + $ ;delimeter (not 0-9 or sep)
                                   '([0-9]{2})', $           ;MM
                                   len=len, /subexp)

    ;/YYYY/MM/ format
    pos = stregex(directory, sep + '(.+' + sep + ')' + $     ;Prefixed directory structure
                                   '([0-9]{4})' + sep + $    ;YYYY
                                   '([0-9]{2})' + sep, $     ;MM
                                   len=len, /subexp)

end


;+
;   Find a date and/or time embedded within a file name. Supported formats are::
;       YYYYMMDD
;       YYYYMMDD_HHMMSS_HHMMSS
;       YYYYDDD
;       YYYYDDD_HHMMSS_HHMMSS
;       HHMMSS_HHMMSS
;
; :Params:
;       DIRECTORY:              in, optional, type=string
;                               The directory name in which to search for embedded dates.
;-
pro MrFileFinder::findFileDate, filename
    compile_opt idl2
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif
    
    ;Get the system path separator
    sep = path_sep()
    
    ;*YYYYMMDD* format
    pos = stregex(filename, '(.+' + sep + ')' + $     ;Prefixed directory structure
                            '([0-9]{4})' + $          ;YYYY
                            '([0-9]{2})' + $          ;MM
                            '([0-9]{2})' + $          ;DD
                            '(.*)', $                 ;Suffix and extension
                            len=len, /subexp)

    ;*YYYYMMDD_HHMMSS_HHMMSS* format
    pos = stregex(filename, '(.+' + sep + ')' + $     ;Prefixed directory structure
                            '([0-9]{4})' + $          ;YYYY
                            '([0-9]{2})' + $          ;MM
                            '([0-9]{2})' + $          ;DD
                            '[^0-9^' + sep + ']?' + $ ;delimeter (not 0-9 or sep)
                            '([0-9]{2})' + $          ;HH
                            '([0-9]{2})' + $          ;MM
                            '([0-9]{2})' + $          ;SS
                            '[^0-9^' + sep + ']?' + $ ;delimeter (not 0-9 or sep)
                            '([0-9]{2})' + $          ;HH
                            '([0-9]{2})' + $          ;MM
                            '([0-9]{2})' + $          ;SS
                            '(.+)', $                 ;Suffix and extension
                            len=len, /subexp)

    ;*YYYYDDD* format
    pos = stregex(filename, '(.+' + sep + ')' + $     ;Prefixed directory structure
                            '([0-9]{4})' + $          ;YYYY
                            '([0-9]{3})' + sep + $    ;DDD
                            '(.*)', $                 ;Suffix and extension
                            len=len, /subexp)

    ;YYYYDDD_HHMMSS_HHMMSS format
    pos = stregex(filename, '(.+' + sep + ')' + $       ;Prefixed directory structure
                            '([0-9]{4})' + $            ;YYYY
                            '([0-9]{3})' + $            ;DDD
                            '[^0-9^' + sep + ']?' + $   ;delimeter (not 0-9 or sep)
                            '([0-9]{2})' + $            ;HH
                            '([0-9]{2})' + $            ;MM
                            '([0-9]{2})' + $            ;SS
                            '[^0-9^' + sep + ']?' + $   ;delimeter (not 0-9 or sep)
                            '([0-9]{2})' + $            ;HH
                            '([0-9]{2})' + $            ;MM
                            '([0-9]{2})' + $            ;SS
                            '(.+)', $                   ;Suffix and extension
                            len=len, /subexp)
    
    ;HHMMSS_HHMMSS format
    pos = stregex(filename, '(.+' + sep + ')' + $     ;Prefixed directory structure
                            '([0-9]{2})' + $          ;HH
                            '([0-9]{2})' + $          ;MM
                            '([0-9]{2})' + $          ;SS
                            '[^0-9^' + sep + ']?' + $ ;delimeter (not 0-9 or sep)
                            '([0-9]{2})' + $          ;HH
                            '([0-9]{2})' + $          ;MM
                            '([0-9]{2})' + $          ;SS
                            '(.+)', $                 ;Suffix and extension
                            len=len, /subexp)

end


;+
;   Set class properties.
;
; :Keywords:
;       FILENAME:               in, optional, type=string
;                               The name of the file currently being used.
;       DIR_NAME:               in, optional, type=string
;                               The directory in which files are sought.
;                               
;-
pro MrFileFinder::SetProperty, $
FILENAME = filename, $
DIR_NAME = dir_name
    compile_opt idl2
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif
    
    ;Set properties of the class.
    if n_elements(filename) eq 0 then self.filename = file_basename(filename)
    if n_elements(dir_name) eq 0 then self.dir_name = dir_name

end


;+
;   Clean up after the object is destroy
;-
pro MrFileFinder::cleanup
    ;Nothing to clean up yet.
end


;+
;   The initialization method.
;
; :Params:
;       FILE_PATH:          in, optional, type=string, default=(FILE_SEARCH(`DIRECTORY`))[0]
;                           The complete file path to an example file used for finding
;                               other similar files. If a date (and time) is found within
;                               the base of the FILE_PATH, then the "next" file will be
;                               the file whose end date (and time) is closest to that of
;                               FILE_PATH.
;
; :Keyword:
;       DIRECTORY:          in, optional, type=string, default='./'
;                           The directory in which to look for files. If a date is found
;                               within the directory string, and the "next file" is not
;                               contained within the directory specified, then a directory
;                               containing the "next date" will be sought.
;       RECUR_PATTERN:      in, optional, type=string, default='*'
;                           A pattern for files to match in any of the directories
;                               specified by the `DIRECTORY`. Used only when `FILE_PATH`
;                               is not present.
;
; :Uses:
;   Uses the following external programs::
;       SetDefaultValue.pro (Coyote Graphics)
;-
function MrFileFinder::init, file_path, $
DIRECTORY = directory, $
RECUR_PATTERN = recur_pattern
    compile_opt idl2
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return, 0
    endif
    
    ;Defaults for the file names
    SetDefaultValue, file_path, ''
    SetDefaultValue, directory, file_dirname(file_path, /MARK_DIRECTORY)
    SetDefaultValue, recur_pattern, '*'
    
    ;Get the file name
    filename = file_basename(file_path)
    
    ;If none was specified, get the first one within DIRECTORY that matches RECUR_PATTERN
    if filename eq '' then begin
        filename = file_search(directory, recur_pattern)
        filename = filename[0]
    endif
    
    
;    self -> findDirDate, directory
;    self -> findFileDateTime, filename
;    
;    self.filename = filename
;    self.file_dir = directory
    
    return, 1
end


;+
;   The class definition statement.
;-
pro MrFileFinder__define
    compile_opt idl2
    
    class = { MrFileFinder, $
              dir_date: '', $
              file_date: '', $
              file_dir: '', $           ;Directory in which to look for files
              file_time: '', $
              filename: '' $            ;Name of file.
             }
end